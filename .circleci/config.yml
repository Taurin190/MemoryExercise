# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers
      - image: circleci/mysql:5.7.32
        environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_memory
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd
          REVIEWDOG_VERSION: "0.9.11"

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip
      - run: |
          sudo docker-php-ext-install pdo_mysql
          sudo docker-php-ext-enable pdo_mysql
      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      # prepare the database
      - run: php artisan migrate --env=testing --database=mysql_testing --force
      - run: php artisan db:seed --env=testing

    #      # run PHP_CodeSniffier
    #      - run:
    #          name: Coding rules check
    #          command: |
    #            mkdir -p ~/phpcs
    #            ./vendor/bin/phpcs --warning-severity=0 --runtime-set ignore_warnings_on_exit 1 --report=checkstyle --report-file=~/phpcs/test_phpcs.xml ./app || true
    #      - store_test_results:
    #          path: ~/phpcs
    #      - store_artifacts:
    #          path: ~/phpcs

      # run tests with phpunit or codecept
      - run: sudo sh -c "echo \"memory_limit = 2048M\" > /usr/local/etc/php/conf.d/memory.ini"
      - run: php -i | grep memory_limit
      - run:
          command: |
            mkdir -p ~/phpunit
            ./vendor/bin/phpunit --log-junit ~/phpunit/junit.xml tests
            phpdbg -qrr vendor/bin/phpunit --coverage-clover ~/phpunit/coverage.xml
          when: always
      - store_test_results:
          path: ~/phpunit
      - store_artifacts:
          path: ~/phpunit
      - codecov/upload:
          file: ~/phpunit/coverage.xml
      - run: curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s
      - run: |
          ./vendor/bin/phpcs --error-severity=0 --runtime-set ignore_warnings_on_exit 1 --standard=PSR2 --report=emacs ./app | ./bin/reviewdog -efm="%f:%l:%c: %m" -reporter=github-pr-review
#      - run: ./vendor/bin/codecept build
#      - run: ./vendor/bin/codecept run
